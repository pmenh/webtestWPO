#!/bin/bash -eu
# Configures the ipfw traffic shaper.

declare ipfw_path=/sbin/ipfw

usage() {
  cat <<EOF
${1:+$*

}Usage: $0 COMMAND [OPTIONS]
Configure a remote ipfw-based traffic shaper with pre-configured pipes (over ssh).

  COMMAND             set', or 'clear'.

  --server VALUE      IP address of the server running ipfw. Requires cert-based ssh login.

  --server_port VALUE SSH port to use (defaults to 22).

  --user VALUE        User account to use when connecting to the server (defaults to root).

  --down_pipe VALUE   Pre-configured pipe number to apply the settings to.

  --down_bw VALUE     '', 'unlimited', or 0 for unlimited (the default),
                       int >0 for bits per second.
                       down == IN to address.

  --down_delay VALUE  '' or 0 for none (the default),
                      int >0 for milliseconds.

  --down_plr VALUE    '' or 0 for none (the default),
                      >0.0 and <=1.0 for packet loss rate.

  --up_pipe VALUE     As noted above.  up == OUT from device.
  --up_bw VALUE       
  --up_delay VALUE
  --up_plr VALUE

  -v, --verbose       Enable verbose output.


Example "Mobile 3G (1.6 Mbps/768 Kbps 300ms RTT 0.01% PLR)":
  $0 set --server 1.2.3.4 \\
      --down_pipe 1 --down_bw 1600000 --down_delay 150 \\
      --up_pipe 1 --up_bw 768000 --up_delay 150 --up_plr 0.0001
EOF
  exit 1
}

update_ipfw() {
  local -r server="$1"
  local -r server_port="$2"
  local -r user="$3"
  local -r pipe="$4"
  local -r bw="$5"
  local -r delay="$6"
  local -r plr="$7"
  local ssh_command="-p$server_port $user@$server"
  local command="ipfw pipe $pipe config"
  if [[ "$bw" != "0" ]]; then
    command+=" bw $bw"
    command+="bit/s"
  fi
  command+=" delay $delay"
  command+="ms"
  if [[ "$plr" != "0" ]]; then
    command+=" plr $plr"
  fi
  echo "ssh $ssh_command $command"
  ssh -p "$server_port" "$user@$server" "$command"
  return 0
}

main() {
  # Parse args
  local command=
  local server=
  local server_port="22"
  local user="root"
  local down_pipe=
  local down_bw="0"
  local down_delay="0"
  local down_plr="0"
  local up_pipe=
  local up_bw="0"
  local up_delay="0"
  local up_plr="0"
  while [[ $# -gt 0 ]]; do
    local v="${2:-MISSING}"
    local shift_by=2
    case "$1" in
      [^-]*) command="$1"; shift_by=1;;
      --server) server="$v";;
      --server_port) server_port="$v";;
      --user) user="$v";;
      --down_pipe) down_pipe="$v";;
      --down_bw) down_bw="$v";;
      --down_delay) down_delay="$v";;
      --down_plr) down_plr="$v";;
      --up_pipe) up_pipe="$v";;
      --up_bw) up_bw="$v";;
      --up_delay) up_delay="$v";;
      --up_plr) up_plr="$v";;
      -v | --verbose) set -x; shift_by=1;;
      -h | --help) usage;;
    esac
    shift $shift_by
  done

  if [[ "$command" == clear ]]; then
    down_bw="0"
    down_delay="0"
    down_plr="0"
    up_bw="0"
    up_delay="0"
    up_plr="0"
  fi

  if [[ "$command" == set || "$command" == clear ]]; then
    update_ipfw "$server" "$server_port" "$user" "$down_pipe" "$down_bw" "$down_delay" "$down_plr" || return 1
    update_ipfw "$server" "$server_port" "$user" "$up_pipe" "$up_bw" "$up_delay" "$up_plr" || return 1
  else
    usage ${command:+Unknown command \'$command\'}
  fi
  return 0
}

echo $*

main $*
exit $?
